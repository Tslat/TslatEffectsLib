plugins {
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
    id 'io.github.CDAGaming.cursegradle' version '1.6.+'
    id 'com.modrinth.minotaur' version '2.8.+'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'io.github.CDAGaming.cursegradle'
    apply plugin: 'com.modrinth.minotaur'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    ext.projectProperties = [
            mod_id: mod_id,
            mod_name: mod_name,
            mod_version: version,
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            forge_loader_version_range: forge_loader_version_range,
            neoforge_version: neoforge_version,
            neoforge_version_range: neoforge_version_range,
            neoforge_loader_version_range: neoforge_loader_version_range,
            fabric_version: fabric_version,
            fabric_loader_version: fabric_loader_version
    ]
    def MODULE_NAME = it.name
    def IS_COMMON = MODULE_NAME == "Common"

    archivesBaseName = "${mod_name}-${MODULE_NAME.toLowerCase()}-${minecraft_version}"
        
    jar {
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version,
                "MixinConfigs": "${mod_id}.mixins.json"
            ])
        }
    }

    repositories {
        mavenCentral()
        maven { url = 'https://maven.parchmentmc.org' }
    }

    if (!IS_COMMON) {
        sourceSets.main.resources.srcDirs += 'src/generated/resources'

        dependencies {
            compileOnly project(":Common")
        }

        tasks.withType(JavaCompile).matching(it2 -> !it2.name.startsWith("neo")).configureEach {
            source(project(":Common").sourceSets.main.allSource)
        }

        sourcesJar {
            from(project(":Common").sourceSets.main.allSource)
        }

        processResources {
            from project(":Common").sourceSets.main.resources
            inputs.properties project.ext.projectProperties
            project.ext.projectProperties.put 'project', project

            filesMatching(['META-INF/mods.toml', 'fabric.mod.json', 'pack.mcmeta']) {
                expand project.ext.projectProperties
            }

            if (!MODULE_NAME.equals("Common") && !MODULE_NAME.equals("Fabric"))
                exclude '**/*.accesswidener'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    publishing {
        repositories {
            maven {
                name = "Cloudsmith"
                url 'https://maven.cloudsmith.io/tslat/tel/'
                credentials {
                    username System.getenv("CLOUDSMITH_USERNAME")
                    password System.getenv("CLOUDSMITH_API_KEY")
                }
            }
        }
    }
}