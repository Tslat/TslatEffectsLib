plugins {
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'io.github.CDAGaming.cursegradle' version '1.6.0'
}

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

minecraft {
    mappings channel: mappings_channel, version: "${mappings_version}-${minecraft_version}"
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config="+mod_id+".mixins.json"

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config="+mod_id+".mixins.json"

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config="+mod_id+".mixins.json"

            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly project(":Common")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
    from(project(":Common").sourceSets.main.allSource)
}

def replaceProperties = [
        mod_id: mod_id,
        mod_name: mod_name,
        mod_version: version,
        minecraft_version: minecraft_version,
        minecraft_version_range: minecraft_version_range,
        forge_version: forge_version,
        forge_version_range: forge_version_range,
        loader_version_range: forge_loader_version_range
]

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching('META-INF/mods.toml') {
        expand replaceProperties
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = archivesBaseName
            artifact jar
            artifact sourcesJar
        }
    }
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN")

    project {
        id = curseforge_id
        changelog = 'https://github.com/Tslat/TslatEffectsLib/commits/1.20'
        releaseType = 'release'
        addGameVersion minecraft_version

        mainArtifact(jar) {
            it.displayName = "${project.mod_name} Forge ${project.minecraft_version}-${project.version}"
        }
    }
}